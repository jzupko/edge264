The test program takes a byte stream formatted according to Annex B, and pretty
prints the headers found.

$ CC edge264_text.c -mssse3 -std=gnu99 -O2
$ ./a.out <video.264 >headers.html



This software is in alpha state, and should not be used as a library yet.
I am working hard to reach a stable version as soon as possible :)

Some of its interesting features:
* Minimalistic API (2 functions)
* The initial search for start codes is fully vectorised
* Faster CABAC decoding by using wider register ranges for codIOffset/codIRange
* A general overflow-protection mechanism based on inserting set bits past the
  RBSP
* Full usage of GCC's vector extensions (mainly for copying aligned blocks of
  data and decoding pixel values, but also in LOTS of unexpected areas :)
* Neighbouring values from MbAddrA/B/C/D are stored in circular buffers,
  yielding excellent cache locality along with low run-time memory use
* CABAC increments from neighbouring flags are precomputed with specific bit
  storage patterns, saving many branches
* A Global Register Variable is used for the slice context, for the joy of GCC
* Prediction samples are passed to residual decoding through SIMD registers,
  saving intermediate memory stores
* A heavily refined branching architecture, such that the whole decoding loop
  fits in L1 cache (less than 32k, small fragmentation)
